// Rem Font Sizing ----------------------------------------------------
// https://github.com/ry5n/rem

// Base font size in pixels, if not already defined.
// Should be the same as the font-size of the html element.
$base-font-size: 16px !default;
$rem-with-px-fallback: true !default;

// @private Number of pixels in 1rem.
// For px -> rem, divide by this ratio; for the other way, multiply.
$px-per-rem: $base-font-size / 1rem;

// Return pixel values as rem
@function px2rem($pxValue) {
  @return $pxValue / $px-per-rem;
}

// Return rem values as px
@function rem-to-px($rem-value) {
  @return $rem-value * $px-per-rem;
}

// For the given property, use rem units with px as a fallback value for older
// browsers.
//
// $property - The css property name.
// $values - The value (or space-separated list of values) for the property.
// $use-px-fallback - Boolean, default: true; whether to use pixel fallback values
//
@mixin rem($property, $values, $use-px-fallback: $rem-with-px-fallback) {
  // Create a couple of empty lists as output buffers.
  $px-values: ();
  $rem-values: ();

  // Ensure $values is a list.
  @if type-of($values) != "list" {
    $values: join((), $values);
  }

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    @if(type-of($value) == number and not unitless($value) and (unit($value) == px or unit($value) == rem)) {
      @if unit($value) == px {
        $px-values: join($px-values, $value);
        $rem-values: join($rem-values, px-to-rem($value));
      }
      @else {
        $px-values: join($px-values, rem-to-px($value));
        $rem-values: join($rem-values, $value);
      }
    }
    @else {
      $px-values: join($px-values, $value);
      $rem-values: join($rem-values, $value);
    }
  }

  // Use pixel fallback for browsers that don't understand rem units.
  @if $use-px-fallback {
    #{$property}: $px-values;
  }

  // Use rem values for everyone else (overrides pixel values).
  #{$property}: $rem-values;
}

// Em Font Sizing -----------------------------------------------------

@function em($target, $context: $baseline-px) {
      @if $target == 0 { @return 0 }
      @return $target / $context + 0em;
}

// Scaling ------------------------------------------------------------

// https://gist.github.com/2237465
// See http://mrdanadams.com/2012/pixel-ems-css-conversion-sass-mixin/

// Default font size in pixels if not overridden.
$baseFontSize: 16px;

//Convert PX units to EMs.
//Ex: margin-right: pem(16);

@function pem($pxval, $base: $baseFontSize) {
  @return #{$pxval / $base}em;
}

// Used to convert PX to EMs for multiple properties or values or both.
//$base is an optional measurement that allows making measurements relative to the parent font size rather than the current. Also accepts a list of lists (instead a list of values) for properties that accept multiple lists of values. Only numbers of converted; everything else is passed through.

//Examples:

//@include scale(line-height, 30)
//@include scale(line-height, 30, 16)
//@include scale(width height, 125);
//@include scale(padding, 0 25, 16);
//@include scale(text-shadow, (#0d6e28 1 1) (#777 0 0 2), 16);
//@include scale(box-shadow, (inset 0 0 0 1 #2a9022) (inset 0 0 3 #459966), 16);
//
@mixin scale($props, $sizes, $base: $baseFontSize) {
    $values: ();
    $sublists: false;
    @each $s in $sizes {
        /* unwrap lists for values that have multiple list of values such as text-shadow */
        @if type-of($s) == list {
            $sublists: true;
            $vv: ();
            @each $ss in $s {
                $vv: append($vv, if(type-of($ss) == number, #{$ss / $base}em, $ss));
            }
            $values: append($values, join((), $vv));
        } @else {
            $values: append($values, if(type-of($s) == number, #{$s / $base}em, $s));
        }
    }
    $value: join((), $values, if($sublists, comma, space));
    @each $prop in $props { #{$prop}: $value }
}
